#!/bin/bash
PROGNAME=$(basename $0)
SLURM_PARTITION="/opt/slurm/current/etc/partitions"
SLURM_BIN="/opt/slurm/current/bin"

function usage() {
cat <<-EOF
Usage: $PROGNAME [-p] [-c] [-m]

Arguments:

  -p: partition
  -c: minimum number of Idle CPU cores
  -m: minimum number of Free Memory(MB)

EOF
exit 0
}

function queue_overview(){ 
        line="%-14s %-7s %-7s %-7s %-7s %-14s %-7s\n"
        printf "$line" "Queue" "Total" "Free" "Jobs" "Jobs" "Time" "SU"
        printf "$line" "(partition)" "Cores" "Cores" "Running" "Pending" "Limit" "Charge"
        for i in {1..70};do printf "=";done; printf "\n"

        for sinfo_data in $(sinfo -h -o "%P/%C/%A/%l/%m");do
                read -r partition active_cpu free_cpu other_cpu total_cpu active_node free_node time_limit total_mem <<< $(echo $sinfo_data| sed 's/\// /g')
                read -r pending_jobs run_jobs <<< $(squeue -p $partition -h -t R,PD | awk '{print $5}'|sort|uniq -c| awk '{print $1}')
                
                # Check if no jobs are running or pending and set them to 0 if so
                [[ -z $run_jobs ]] && run_jobs=0
                [[ -z $pending_jobs ]] && pending_jobs=0
                
                printf "$line" "$partition" "$total_cpu" "$free_cpu" "$run_jobs" "$pending_jobs" "$time_limit" "$total_mem"
        done
}

# If there is no argument show queue overview.
if [[ "$#" -lt 1 ]];then
    queue_overview
fi

while getopts ":c:m:p:" opt; do
    case "${opt}" in
      c)
        NUM_CPUS=${OPTARG}
      ;;
      m)
        NUM_MEM=${OPTARG}
      ;;
      p)
        PARTITION=${OPTARG}
      ;;
      \?|:)
        usage
      ;;
    esac
done

if [[ -z $PARTITION ]];then usage;fi

COUNT=0
if [[ ! -z $NUM_CPUS ]];then
    CHECK="CPU"
    COUNT=$[$COUNT +1]
    if [[ ! "$NUM_CPUS" =~ ^[0-9]+$ ]];then
      usage
    fi
fi
if [[ ! -z $NUM_MEM ]];then
    CHECK="MEM"
    COUNT=$[$COUNT +1]
    if [[ ! "$NUM_MEM" =~ ^[0-9]+$ ]];then
      usage
    fi
fi

queue_detail